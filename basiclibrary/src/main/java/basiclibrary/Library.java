/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

public class Library {

    /*
     * Rolling Dice
     */
    public static int[] roll(int inputNumber) {
        int numberOfSides = 6;
        int[] rollArr = new int[inputNumber];
        for (int i = 0; i < inputNumber; i++) {
            int rollNumber = (int)(Math.random() * numberOfSides) + 1;
            rollArr[i] = rollNumber;
        }
        return rollArr;
    }

    /*
     * Contains Duplicates
     */
    public static boolean containsDuplicates(int[] inputArray) {
        for (int i = 0; i < inputArray.length; i++) {
            for (int j = i + 1; j < inputArray.length; j++) {
                if (inputArray[i] == (inputArray[j])) {
                    return true;
                }
            }
        }
        return false;
    }

    /*
     * Calculating Averages
     */
    public static float calculatingAverages(int[] inputArray) {
        int total = 0;
        float avg;
        for (int i = 0; i < inputArray.length; i++) {
            total = total + inputArray[i];
        }
        avg = (float) total/(inputArray.length);
        return avg;
    }

    /*
     * Arrays of Arrays
     */
    public static int arraysOfArrays(int[][] doubleArr) {
        int lowest = 100;
        for (int i = 0; i < doubleArr.length; i++) {
            int total = 0;
            int avg;
            for (int j = 0; j < doubleArr[i].length; j++) {
                total = total + doubleArr[i][j];
            }
            avg = total/(doubleArr[i].length);
            if (avg < lowest) {
                lowest = avg;
            }
        }
        return lowest;
    }

    /*
     * Analyzing Weather Data
     */
    public static String analyzeWeather(int[][] weatherArr){
        int lowest = weatherArr[0][0];
        int highest = weatherArr[0][0];
        HashSet<Integer> uniqueTemperatures = new HashSet<>();
        String response = "";

        for (int i = 0; i < weatherArr.length; i++){
            for (int j = 0; j < weatherArr[i].length; j++){
                if (weatherArr[i][j] < lowest){
                    lowest = weatherArr[i][j];
                }
                if (weatherArr[i][j] > highest){
                    highest = weatherArr[i][j];
                }
                uniqueTemperatures.add(weatherArr[i][j]);
            }
        }

        System.out.println("High: " + highest);
        System.out.println("Low: " + lowest);

        for (int i = lowest + 1; i < highest; i++){
            if (!uniqueTemperatures.contains(i)){
                response += "\nNever saw temperature: " + i;
            }
        }
        return response;
    }

    /*
     * Tallying Election
     */
    public static String tally(List<String> votes) {
        HashMap<String, Integer> voteMap = new HashMap<>();
        int mostVotesNum = 0;
        String winner = "";

        for (String vote : votes){
            if (voteMap.containsKey(vote)){
                voteMap.put(vote, voteMap.get(vote) + 1);
            } else {
                voteMap.put(vote, 1);
            }
        }

        for (String key : voteMap.keySet()) {
            if (mostVotesNum < voteMap.get(key)) {
                mostVotesNum = voteMap.get(key);
                winner = key;
            }
        }

        System.out.println(winner + " received the most votes!");
        return winner;
    }

}
